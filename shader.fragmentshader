#version 330 core

// Interpolated values from the vertex shaders
in vec2 UV;
in vec3 PositionWS;
in vec3 NormalCS;
in vec3 EyeDirectionCS;
in vec3 LeftLightDirectionCS;
in vec3 RightLightDirectionCS;

// Ouput data
out vec3 Color;

// Values that stay constant for the whole mesh.
uniform sampler2D Texture;
uniform vec3 LeftLight;
uniform vec3 RightLight;
uniform vec3 LightColor;
uniform float LightPower;
uniform vec3 AmbientColor;

void main() {
	// Material properties
	vec3 MaterialDiffuseColor = texture(Texture, UV).rgb;
	vec3 MaterialAmbientColor = AmbientColor * MaterialDiffuseColor;
	vec3 MaterialSpecularColor = vec3(0.8, 0.8, 0.8);

	// Distance to the light
	float LeftDistance = length(LeftLight - PositionWS);
	float RightDistance = length(RightLight - PositionWS);

	// Normal of the computed fragment, in camera space
	vec3 n = normalize(NormalCS);
	// Direction of the light (from the fragment to the light)
	vec3 l1 = normalize(LeftLightDirectionCS);
	vec3 l2 = normalize(RightLightDirectionCS);

	// Cosine of the angle between the normal and the light direction, 
	// clamped above 0
	//  - light is at the vertical of the triangle -> 1
	//  - light is perpendicular to the triangle -> 0
	//  - light is behind the triangle -> 0
	float LeftCosTheta = clamp(dot(n, l1), 0, 1);
	float RightCosTheta = clamp(dot(n, l2), 0, 1);
	
	// Eye vector (towards the camera)
	vec3 E = normalize(EyeDirectionCS);
	// Direction in which the triangle reflects the light
	vec3 R1 = reflect(-l1, n);
	vec3 R2 = reflect(-l2, n);

	// Cosine of the angle between the Eye vector and the Reflect vector,
	// clamped to 0
	//  - Looking into the reflection -> 1
	//  - Looking elsewhere -> < 1
	float LeftCosAlpha = clamp(dot(E, R1), 0, 1);
	float RightCosAlpha = clamp(dot(E, R2), 0, 1);
	
	Color = 
		// Ambient : simulates indirect lighting
		MaterialAmbientColor +
		// Diffuse : "color" of the object
		MaterialDiffuseColor * LightColor * LightPower * LeftCosTheta / (LeftDistance * LeftDistance) +
		MaterialDiffuseColor * LightColor * LightPower * RightCosTheta / (RightDistance * RightDistance) +
		// Specular : reflective highlight, like a mirror
		MaterialSpecularColor * LightColor * LightPower * pow(LeftCosAlpha, 5) / (LeftDistance * LeftDistance) +
		MaterialSpecularColor * LightColor * LightPower * pow(RightCosAlpha, 5) / (RightDistance * RightDistance);
}